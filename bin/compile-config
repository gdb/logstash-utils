#!/usr/bin/env ruby
# Write your logstash config files in Ruby.
#
# Usage: compile-config <path/to/config.ru>
#
# Here's a sample config.ru:
#
# input {
#   stdin(
#     :type => "stdin"
#   )
# }
#
# output {
#   stdout {
#   }
# }
#
# Which would compile to:
#
# input {
#   stdin {
#     type => "stdin"
#   }
# }
#
# output {
#   stdout {
#   }
# }
#
# (The following interface is a bit janky, and hence may change.)  You
# can pass values to your templates with a "-a key=value" on the
# command line, which would make "args[:key]" in your tempalte return
# "value".
require 'optparse'

require 'rubygems'
require 'logstash-utils'

module LogstashUtils
  class Runner
    def initialize(target, options)
      @target = target
      @options = options
    end

    def run
      if path = @options[:outfile]
        DSL.compile_to_file(@options[:outfile], @target, @options)
      else
        puts DSL.compile(@target, @options)
      end
    end
  end
end

def main
  options = {:args => {}}
  optparse = OptionParser.new do |opts|
    opts.banner = "Usage: #{$0} [options]"

    opts.on('-h', '--help', 'Display this message') do
      puts opts
      exit(1)
    end

    opts.on('-a KEY=VALUE', '--arg', 'Argument') do |kv|
      key, value = kv.split('=', 2)
      value ||= true
      options[:args][key.to_sym] = value
    end

    opts.on('-o OUTFILE', '--output', 'Output to file') do |outfile|
      options[:outfile] = outfile
    end

    opts.on('-v', '--verbosity', 'Verbosity of debugging output') do
      LogstashUtils::DSL.log.level -= 1
    end
  end
  optparse.parse!

  if ARGV.length != 1
    puts optparse
    return 1
  end

  runner = LogstashUtils::Runner.new(ARGV[0], options)
  runner.run
  return 0
end

ret = main
begin
  exit(ret)
rescue TypeError
  exit(0)
end
